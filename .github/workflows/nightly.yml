name: Nightly

on:
    push:
        branches: [ main ]

permissions:
    contents: write

concurrency:
    group: nightly
    cancel-in-progress: true

jobs:
    build:
        name: Build ${{ matrix.name }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: linux-amd64-x11-wk41
                      runner: ubuntu-24.04
                      goos: linux
                      goarch: amd64
                      tags: x11,webkit2_41
                    - name: linux-arm64-x11-wk41
                      runner: ubuntu-24.04-arm
                      goos: linux
                      goarch: arm64
                      tags: x11,webkit2_41
                    - name: linux-amd64-x11-wk40
                      runner: ubuntu-22.04
                      goos: linux
                      goarch: amd64
                      tags: x11,webkit2_40
                    - name: windows-amd64
                      runner: windows-latest
                      goos: windows
                      goarch: amd64
                      tags: ""
                    - name: macos-arm64
                      runner: macos-14
                      goos: darwin
                      goarch: arm64
                      tags: ""

        runs-on: ${{ matrix.runner }}

        steps:
            - uses: actions/checkout@v5

            - name: Setup Go
              uses: actions/setup-go@v6
              with:
                  go-version-file: go.mod
                  cache: true

            - uses: actions/setup-node@v5
              with:
                  node-version: 20

            - name: Upgrade npm
              run: npm i -g npm@latest

            - name: Create lockfile for cache
              run: npm install --prefix frontend --package-lock-only --no-audit --no-fund

            - uses: actions/setup-node@v5
              with:
                  node-version: 20
                  cache: npm
                  cache-dependency-path: frontend/package-lock.json

            # Use npm install (not ci) so platform optionalDependencies resolve per runner OS/arch
            - name: Install frontend deps
              run: npm install --prefix frontend

            # Ensure the *exact* rollup-native version is present (matches rollup's version)
            - name: Ensure Rollup native binary (exact version)
              working-directory: frontend
              shell: bash
              run: |
                  set -euo pipefail
                  os="$(uname -s)"; arch="$(uname -m)"
                  case "$os-$arch" in
                    Linux-x86_64)  pkg='@rollup/rollup-linux-x64-gnu' ;;
                    Linux-aarch64) pkg='@rollup/rollup-linux-arm64-gnu' ;;
                    Darwin-arm64)  pkg='@rollup/rollup-darwin-arm64' ;;
                    Darwin-x86_64) pkg='@rollup/rollup-darwin-x64' ;;
                    MINGW*|MSYS*|CYGWIN*|Windows_NT-*) pkg='@rollup/rollup-win32-x64-msvc' ;;
                    *) pkg='' ;;
                  esac
                  if [ -n "$pkg" ]; then
                    ver="$(node -p "require('rollup/package.json').version")"
                    echo "Installing $pkg@$ver"
                    npm i --no-save -D "$pkg@$ver"
                    node -e "require('$pkg'); console.log('OK: $pkg present')"
                  fi

            # Build the frontend now, so we can skip Wails' install/build
            - name: Build frontend
              run: npm run build --prefix frontend

            - name: "Linux: install Wails build deps"
              if: ${{ startsWith(matrix.runner, 'ubuntu-') }}
              shell: bash
              run: |
                  set -euo pipefail
                  sudo apt-get update
                  sudo apt-get install -y build-essential libgtk-3-dev
                  # Pick WebKit dev package based on matrix.tags
                  case "${{ matrix.tags }}" in
                    *webkit2_41*) sudo apt-get install -y libwebkit2gtk-4.1-dev ;;
                    *webkit2_40*) sudo apt-get install -y libwebkit2gtk-4.0-dev ;;
                    *) echo "No webkit tag requested; skipping libwebkit install" ;;
                  esac

            - name: Setup Wails
              run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

            - name: Install Task
              run: go install github.com/go-task/task/v3/cmd/task@latest

            - name: Ensure frontend/dist exists
              run: task ensure-dist

            - name: Clean old binaries
              shell: bash
              run: rm -rf build/bin || true

            # IMPORTANT: -s skips Wails' frontend install/build steps
            - name: Wails build (current OS/arch, skip frontend steps)
              shell: bash
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
                  # CGO is required on Linux/macOS; leave unset on Windows
                  CGO_ENABLED: ${{ startsWith(matrix.goos, 'linux') || startsWith(matrix.goos, 'darwin') && '1' || '' }}
              run: |
                  set -euo pipefail
                  if [ -n "${{ matrix.tags }}" ]; then
                    echo "Building with tags: ${{ matrix.tags }}"
                    wails build -tags "${{ matrix.tags }}" -clean -s
                  else
                    wails build -clean -s
                  fi

            - name: Package
              shell: bash
              run: |
                  set -euo pipefail
                  mkdir -p out
                  # Create a suffix from tags (e.g., -x11-webkit2_41) if tags are non-empty
                  TAGSUFFIX=""
                  if [ -n "${{ matrix.tags }}" ]; then
                    TAGSUFFIX="-${{ matrix.tags }}"    # keep commas if you like; or replace with dashes:
                    TAGSUFFIX="${TAGSUFFIX//,/-}"
                  fi
                  ARCHIVE="opensplit-${{ matrix.goos }}-${{ matrix.goarch }}${TAGSUFFIX}.zip"
                  case "${{ matrix.goos }}" in
                    windows)
                      pwsh -NoProfile -Command "Compress-Archive -Path 'build/bin/*' -DestinationPath \"out/$ARCHIVE\" -Force"
                      ;;
                    darwin)
                      ditto -c -k --sequesterRsrc --keepParent build/bin "out/$ARCHIVE"
                      ;;
                    *)
                      (cd build/bin && zip -r "../../out/$ARCHIVE" .)
                      ;;
                  esac
                  echo "ARCHIVE=out/$ARCHIVE" >> "$GITHUB_ENV"

            - name: Upload artifact (per platform)
              uses: actions/upload-artifact@v4
              with:
                  name: nightly-zips-${{ matrix.name }}
                  path: ${{ env.ARCHIVE }}

            # (Optional) Debug if rollup fails again
            - name: Debug rollup layout
              if: failure()
              working-directory: frontend
              run: |
                  node -p "require('rollup/package.json').version" || true
                  ls -la node_modules/@rollup || true
                  grep -A2 optionalDependencies node_modules/rollup/package.json || true

    publish:
        name: Publish Nightly Release
        needs: build
        runs-on: ubuntu-latest

        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v6
              with:
                  pattern: nightly-zips-*
                  merge-multiple: true
                  path: dist

            - name: Ensure 'nightly' release exists
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release view nightly --repo "${{ github.repository }}" >/dev/null 2>&1 || \
                    gh release create nightly --repo "${{ github.repository }}" --title "Nightly" --prerelease --notes "Rolling nightly build" --latest=false

            - name: Write Nightly release notes
              run: |
                  cat > notes.md << 'EOF'
                  ## Which Linux build should I download?

                  Pick the archive that matches your WebKitGTK **runtime**:

                  - Distros with WebKitGTK 4.1: use the `*-x11-webkit2_41*` build
                  - Distros with WebKitGTK 4.0: use the `*-x11-webkit2_40*` build

                  Note: these only work with X11 at the moment, Wayland support coming soon.
                
                  You can check your system with one of these one-liners:

                  **Debian/Ubuntu:**
                  ```bash
                  if dpkg -s libwebkit2gtk-4.1-0 >/dev/null 2>&1; then
                    echo "Use: *-x11-webkit2_41*"
                  elif dpkg -s libwebkit2gtk-4.0-37 >/dev/null 2>&1; then
                    echo "Use: *-x11-webkit2_40*"
                  else
                    echo "No WebKitGTK 4.0/4.1 runtime found. On Ubuntu 24.04+: sudo apt install libwebkit2gtk-4.1-0"
                    echo "On Ubuntu 22.04: sudo apt install libwebkit2gtk-4.0-37"
                  fi
                  ```

                  **Generic (no dev packages required):**
                  ```bash
                  if ldconfig -p 2>/dev/null | grep -q 'libwebkit2gtk-4\.1\.so'; then
                    echo "Use: *-x11-webkit2_41*"
                  elif ldconfig -p 2>/dev/null | grep -q 'libwebkit2gtk-4\.0\.so'; then
                    echo "Use: *-x11-webkit2_40*"
                  else
                    echo "Could not detect WebKitGTK 4.0/4.1 runtime on this system."
                  fi
                  ```

                  > Note: Linux builds require running under **Xorg** (we ship `-tags x11`). Wayland global hotkeys arenâ€™t supported.
                  EOF

            - name: Update Nightly release notes
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: gh release edit nightly --repo "${{ github.repository }}" --notes-file notes.md

            - name: Upload assets (overwrite if exist)
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  shopt -s nullglob
                  for f in dist/*; do
                    echo "Uploading $f"
                    gh release upload nightly "$f" --clobber --repo "${{ github.repository }}"
                  done
