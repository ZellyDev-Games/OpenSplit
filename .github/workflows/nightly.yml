name: Nightly

on:
    push:
        branches: [ main ]

permissions:
    contents: write

concurrency:
    group: nightly
    cancel-in-progress: true

jobs:
    build:
        name: Build ${{ matrix.name }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: linux-amd64
                      runner: ubuntu-22.04
                      goos: linux
                      goarch: amd64
                    - name: linux-arm64
                      runner: ubuntu-22.04
                      goos: linux
                      goarch: arm64
                    - name: windows-amd64
                      runner: windows-latest
                      goos: windows
                      goarch: amd64
                    - name: macos-arm64
                      runner: macos-14
                      goos: darwin
                      goarch: arm64

        runs-on: ${{ matrix.runner }}

        steps:
            - uses: actions/checkout@v5

            - name: Setup Go
              uses: actions/setup-go@v6
              with:
                  go-version-file: 'go.mod'
                  cache: true

            - name: Setup Node
              uses: actions/setup-node@v5
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: 'frontend/package-lock.json'

            - name: "Linux: install Wails build deps"
              if: ${{ startsWith(matrix.runner, 'ubuntu-') }}
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                    libgtk-3-dev \
                    libwebkit2gtk-4.0-dev \
                    libayatana-appindicator3-dev \
                    librsvg2-dev

            - name: Setup Wails
              run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

            - name: "Install Task (via go install)"
              run: go install github.com/go-task/task/v3/cmd/task@latest

            - name: Ensure frontend/dist exists
              run: task ensure-dist

            - name: Install frontend deps
              run: task deps

            - name: Clean old binaries
              shell: bash
              run: |
                  rm -rf build/bin || true

            - name: Wails build (current OS/arch)
              shell: bash
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
              run: |
                  # For Windows/macOS runners this builds native; for Linux we set GOOS/GOARCH
                  wails build -clean

            - name: Package
              shell: bash
              run: |
                  mkdir -p out
                  ARCHIVE="opensplit-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
                  case "${{ matrix.goos }}" in
                    windows)
                      pwsh -NoProfile -Command "Compress-Archive -Path 'build/bin/*' -DestinationPath \"out/$ARCHIVE\" -Force"
                      ;;
                    darwin)
                      # 'ditto' preserves file flags better than zip on macOS
                      ditto -c -k --sequesterRsrc --keepParent build/bin "out/$ARCHIVE"
                      ;;
                    *)
                      (cd build/bin && zip -r "../out/$ARCHIVE" .)
                      ;;
                  esac
                  echo "ARCHIVE=out/$ARCHIVE" >> $GITHUB_ENV

            - name: Upload artifact (collect)
              uses: actions/upload-artifact@v4
              with:
                  name: nightly-zips
                  path: ${{ env.ARCHIVE }}

    publish:
        name: Publish Nightly Release
        needs: build
        runs-on: ubuntu-latest

        steps:
            - uses: actions/download-artifact@v5
              with:
                  name: nightly-zips
                  path: dist

            - name: Publish/Update 'nightly' release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: nightly
                  name: Nightly
                  prerelease: true
                  files: dist/*
                  fail_on_unmatched_files: false
                  generate_release_notes: false
                  make_latest: false
                  overwrite_files: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
